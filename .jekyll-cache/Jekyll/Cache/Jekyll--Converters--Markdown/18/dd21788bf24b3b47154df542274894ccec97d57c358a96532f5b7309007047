I"7Y<h1 id="dom">DOM</h1>

<h3 id="dom-document-object-model">DOM (Document Object Model)</h3>
<ul>
  <li><strong>HTML 문서의 계층적 구조와 정보를 표현하며 이를 제어할 수 있는 API, 즉 프로퍼티와 메소드를 제공하는 트리 자료구조</strong>이다.</li>
</ul>

<h3 id="node">Node</h3>

<h3 id="html-요소와-노드-객체">HTML 요소와 노드 객체</h3>
<ul>
  <li>HTML 요소란 HTML 문서를 구성하는 개별적인 요소를 의미한다.</li>
  <li>HTML 요소의 구조 : <시작태그 어트리뷰트="" 이름="어트리뷰트 값">콘텐츠&lt;/종료태그&gt;</시작태그></li>
  <li><strong>HTML 요소는 렌더링 엔진에 의해 파싱되어 DOM을 구성하는 요소 노드 객체로 변환된다.</strong> 어트리뷰트는 어트리뷰트 노드로, 텍스트 콘텐츠는 텍스트 노드로 변환된다.</li>
  <li>HTML 요소는 중첩 관계를 갖는다. 콘텐츠 영역에 다른 HTML 요소를 포함할 수 있다.</li>
  <li>노드 객체들로 구성된 트리 자료구조를 DOM, DOM 트리라 부르기도 한다.</li>
</ul>

<h3 id="노드-객체의-타입">노드 객체의 타입</h3>
<ul>
  <li>노드 객체는 총 12개의 노드 타입이 있다. 중요한 노드 타입은 4가지이다.</li>
  <li>Document node
    <ul>
      <li>DOM 트리의 최상위에 존재하는 루트 노드. document 객체를 가리킨다. document 객체는 브라우저가 렌더링한 HTML 문서 전체를 가리키는 객체로서 전역 객체 window의 document property에 바인딩되어 있다.</li>
      <li>브라우저 환경의 모든 자바스크립트 코드는 script 태그에 의해 분리되어 있어도 하나의 window 전역 객체를 공유한다. 즉, HTML 당 document 객체는 유일하다.</li>
    </ul>
  </li>
  <li>Element node
    <ul>
      <li>HTML 요소를 가리키는 객체. 문서의 구조를 표현한다.</li>
    </ul>
  </li>
  <li>Attribute node
    <ul>
      <li>HTML 요소의 어트리뷰트를 가리키는 객체. 어트리뷰트 노드는 어트리뷰트가 지정된 HTML 요소의 요소 노드와 형제 관계를 갖는다.</li>
      <li>단 요소 노드는 부모와 연결되어 있지만, 어트리뷰트 노드는 형제 노드인 요소 노드에만 연결되어 있다. 따라서 attribute 참조/변경시, 먼저 형제 노드인 요소 노드에 접근해야 한다.</li>
    </ul>
  </li>
  <li>Text node
    <ul>
      <li>HTML 요소의 텍스트를 가리키는 객체. 요소 노드의 자식 노드이면서 리프 노드이다. DOM 트리의 최종단이다.</li>
    </ul>
  </li>
</ul>

<h3 id="element-node-취득">Element node 취득</h3>
<ul>
  <li>HTML 의 구조나 내용, 스타일을 동적으로 조작하려면 요소 노드 취득이 필요하다.</li>
</ul>

<h4 id="1-id를-이용한-요소-노드-취득">1. id를 이용한 요소 노드 취득</h4>
<ul>
  <li>Document.prototype.getElementById 메소드는 인수로 전달한 id 어트리뷰트 값을 갖는 하나의 요소 노드를 반환한다. getElementById 메소드는 Document.prototype 의 프로퍼티이므로, 반드시 document 를 통해 호출해야 한다.</li>
  <li>id 는 HTML 문서 내에 유일한 값이어야 하며, class 와는 다르게 공백 문자로 구분해 여러 개의 값을 가질 수 없다.</li>
  <li>id 값을 갖는 HTML 요소가 없는 경우 null을 반환한다.</li>
  <li>id attribute 를 부여하면 id 값과 동일한 이름의 전역 변수가 암묵적으로 선언되고, 해당 노드 객체가 할당된다.
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"foo"</span><span class="nt">&gt;&lt;/div&gt;</span>
 <span class="nt">&lt;script&gt;</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span> <span class="o">===</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
 <span class="nt">&lt;/script&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>단, id 값과 동일한 이름의 전역 변수가 이미 선언되어 있으면 이 전역 변수에 노드 객체가 재할당되지 않는다.</li>
</ul>

<h4 id="2-태그-이름을-이용한-요소-노드-취득">2. 태그 이름을 이용한 요소 노드 취득</h4>
<ul>
  <li>Document.prototype/Element.prototype.getElementsByTagName 메소드는 인수로 전달한 태그 이름을 갖는 모든 요소 노드들을 반환한다. 여러 개의 요소 노드 객체를 갖는 DOM 컬렉션 객체인 HTMLCollection 객체를 반환한다.</li>
  <li>HTMLCollection 객체는 유사 배열 객체이면 이터러블이다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">"fruit"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">"apple"</span><span class="nt">&gt;</span>apple<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">"banana"</span><span class="nt">&gt;</span>banana<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">"orange"</span><span class="nt">&gt;</span>orange<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;script&gt;</span>
  <span class="kd">const</span> <span class="nx">$elems</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">'</span><span class="s1">li</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">[...</span><span class="nx">$elems</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">elem</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">elem</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">;</span> <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
```s
- HTML  문서의 모든 요소 노드를 취득하려면 getElementByTagName 메소드의 인수로 '*'를 전달한다.
  
```javascript
const $all = document.getElementsByTagName(*);
// -&gt; HTMLCollection(8) [html, head, body, ul, li#apple, ....]
</code></pre></div></div>

<ul>
  <li>getElementByTagName 메소드는 Document.prototype 에 정의된 메소드랑 Element.prototype 에 정의된 메소드가 있다.
    <ul>
      <li>Document.prototype.getElementByTagName
        <ul>
          <li>DOM 의 root node 인 document 를 통해 호출하며 DOM 전체에서 요소 노드를 탐색하여 반환한다.</li>
        </ul>
      </li>
      <li>Element.prototype.getElementByTagName
        <ul>
          <li>특정 요소 노드를 통해 호출하며, 특정 요소 노드의 자손 노드 중에서 요소 노드를 탐색하여 반환한다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">$fruits</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">fruit</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">$lisFromFruits</span> <span class="o">=</span> <span class="nx">$fruits</span><span class="p">.</span><span class="nx">getElementByTagName</span><span class="p">(</span><span class="dl">'</span><span class="s1">li</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$lisFromFruits</span><span class="p">);</span> <span class="c1">// HTMLCollection(3) [li, li, li]</span>
</code></pre></div></div>

<h4 id="3-class를-이용한-요소-노드-취득">3. class를 이용한 요소 노드 취득</h4>
<ul>
  <li>Document.prototype/Element.prototype.getElementsByClassName 메소드는 인수로 전달한 class 값을 갖는 모든 요소 노드들을 탐색하여 반환한다. 인수로 전달할 class 값은 공백으로 구분하여 여러 개의 class 를 지정할 수 있다.</li>
  <li>HTMLCollection 객체 반환한다.</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"fruit apple"</span><span class="nt">&gt;</span>apple<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"fruit banana"</span><span class="nt">&gt;</span>banana<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"fruit orange"</span><span class="nt">&gt;</span>orange<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;script&gt;</span>
  <span class="kd">const</span> <span class="nx">$elems</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="dl">'</span><span class="s1">fruit</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">[...</span><span class="nx">$elems</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">elem</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">elem</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">;</span> <span class="p">});</span>

  <span class="kd">const</span> <span class="nx">$apples</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="dl">'</span><span class="s1">fruit apple</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">[...</span><span class="nx">$apples</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">elem</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">elem</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">;</span> <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>
<ul>
  <li>getElementsByClassName 메소드는 Document.prototype 에 정의된 메소드랑 Element.prototype 에 정의된 메소드가 있다.
    <ul>
      <li>Document.prototype.getElementsByClassName
        <ul>
          <li>DOM 의 root node 인 document 를 통해 호출하며 DOM 전체에서 요소 노드를 탐색하여 반환한다.</li>
        </ul>
      </li>
      <li>Element.prototype.getElementsByClassName
        <ul>
          <li>특정 요소 노드를 통해 호출하며, 특정 요소 노드의 자손 노드 중에서 요소 노드를 탐색하여 반환한다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="4-css-selector를-이용한-요소-노드-취득">4. css selector를 이용한 요소 노드 취득</h4>
<ul>
  <li>css selector는 스타일을 적용하고자 하는 HTML 요소를 특정할 때 사용하는 문법이다.
```css
    <ul>
      <li>{ … } /* 전체 선택자 <em>/
p { … } /</em> 태그 선택자 <em>/
#foo { … } /</em> id 선택자 <em>/
.foo { … } /</em> class 선택자 <em>/
input[type=text] { … } /</em> attribute 선택자 <em>/
div p { … } /</em> 후손 선택자 <em>/
div &gt; p { … } /</em> 자식 선택자 <em>/ 
p + ul { … } /</em> 인접 형제 선택자 <em>/
p ~ ul { … } /</em> 일반 형제 선택자 <em>/
a:hover { … } /</em> 가상 클래스 선택자 <em>/ 
p::before { … } /</em> 가상 요소 선택자 */
```</li>
    </ul>
  </li>
  <li>Document.prototype/Element.prototype.querySelector 메소드는 인수로 전달한 css selector를 만족시키는 하나의 요소 노드를 탐색하여 반환한다.
    <ul>
      <li>인수로 전달한 css selector 를 만족시키는 요소 노드가 여러 개인 경우 첫 번째 요소 노드만 반환한다. 만족하는 요소 노드가 없는 경우 null 을 반환한다.</li>
    </ul>
  </li>
  <li>Document.prototype/Element.prototype.querySelectorAll 메소드는 인수로 전달한 css selector를 만족시키는 모든 요소 노드를 탐색하여 반환한다.
    <ul>
      <li>DOM 컬렉션 객체인 NodeList 객체를 반환한다. 이 객체는 유사 배열 객체이면서 이터러블이다.</li>
    </ul>
  </li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"apple"</span><span class="nt">&gt;</span>apple<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"banana"</span><span class="nt">&gt;</span>banana<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"orange"</span><span class="nt">&gt;</span>orange<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;script&gt;</span>
  <span class="kd">const</span> <span class="nx">$elems</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">ul &gt; li</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">$elems</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">elem</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">elem</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">;</span> <span class="p">});</span> <span class="c1">//NodeList는 forEach 메소드를 제공한다.</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">$all</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="o">*</span><span class="p">);</span>
<span class="c1">// -&gt; NodeList(8) [html, head, body, ul, li#apple, ....]</span>
</code></pre></div></div>

<ul>
  <li><strong>css selector를 사용하는 querySelector, querySelectorAll 메소드는 getElementById, getElementBy— 메소드보다 다소 느린 것으로 알려져 있다.</strong> 하지만, css selector 를 사용하여 구체적인 조건으로 요소 노드 취득 가능하다는 장점이 있다.</li>
  <li>따라서 id attribute가 있는 요소 노드를 취득할 때에는 getElementById 메소드를 사용하고, 그 외의 경우에는 querySelector, querySelectorAll 을 사용하는 것을 권장한다.<br />
<br /></li>
</ul>

<h4 id="5-특정-요소-노드-취득할-수-있는지-확인">5. 특정 요소 노드 취득할 수 있는지 확인</h4>
<ul>
  <li>Element.prototype.matches 메소드는 인수로 전달한 css selector 를 통해 특정 요소 노드를 취득할 수 있는지 확인한다.</li>
  <li>이벤트 위임을 사용할 때 유용하다.
```html</li>
</ul>
<body>
  <ul id="fruits">
    <li class="apple">apple</li>
    <li class="banana">banana</li>
    <li class="orange">orange</li>
  </ul>
  <script>
  const $apple = document.querySelector('.apple');
  console.log($apple.matches('#fruits > li.apple')); //true
  </script>
</body>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
#### 6.  HTMLCollection과 NodeList
- DOM API 가 여러 개의 결과값을 반환하기 위한 DOM Collection 객체이다.
- 둘 다 유사 배열 객체이면서 이터러블이다. for ... of 문과 스프레드 문법 사용 가능하다.
- 중요한 특징은 **노드 객체의 상태 변화를 실시간으로 반영하는 살아 있는 객체라는 것이다.**
- HTMLCollection 객체는 언제나 live 객체로 동작한다. NodeList 객체는 대부분은 non-live 객체로 동작하지만, 경우에 따라 live 객체로 동작할 때가 있다.

- HTMLCollection
  - getElementByTagName, getElementByClassName 메소드가 반환하는 HTMLCollection 객체는 노드 객체의 상태 변화를 실시간으로 반영하는 live DOM Collection 객체이다. 

```html
&lt;body&gt;
  &lt;ul id="fruits"&gt;
    &lt;li class="red"&gt;apple&lt;/li&gt;
    &lt;li class="red"&gt;banana&lt;/li&gt;
    &lt;li class="red"&gt;orange&lt;/li&gt;
  &lt;/ul&gt;
  &lt;script&gt;
  const $elems = document.getElementByClassName('red');
  for(let i = 0; i &lt; $elems.length ; i++){
    $elems[i].className = 'blue';
  }
  console.log($elems); // HTMLCollection(1) [li.red]
  &lt;/script&gt;
&lt;/body&gt;
</code></pre></div></div>

<ul>
  <li>모든 li 요소의 class 가 blue로 변경되기를 기대하였으나, 가운데 li 가 그대로 red로 남아 있다. 이유는?
    <ul>
      <li>i = 0 일 때, 첫번째 li는 ‘blue’ 로 변경되었다. 그리고 <strong>$elems 에서 실시간으로 제거되었다.</strong></li>
      <li>i = 1 일 때, 첫번째 li는 제거되었기 때문에 세 번째 li 요소를 가리키고 있다. 따라서 세 번째 li를 ‘blue’ 로 변경하고 $elems 에서 마찬가지로 실시간으로 제거되었다.</li>
      <li>i = 2 일 때, $elems.length 가 1이므로 반복문이 종료되었다. 따라서 두 번째 li class 값이 변경되지 않았다.</li>
    </ul>
  </li>
</ul>

<p>for loop 을 역방향으로 순회하거나, while 문을 사용해서 HTMLCollection 객체에 노드 객체가 남아 있지 않을 때까지 반복하는 방법으로 해결 가능하다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">$elems</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span><span class="mi">1</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">){</span>
  <span class="nx">$elems</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">$elems</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">i</span><span class="p">){</span>
  <span class="nx">$elems</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>가장 간단한 해결책은 부작용을 발생시키는 원인인 HTMLCollection 객체를 사용하지 않는 것이다. 이 객체를 배열로 변환하면 유용한 배열의 고차 함수도 함께 사용할 수 있다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[...</span><span class="nx">$elems</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">elem</span> <span class="o">=&gt;</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>NodeList
    <ul>
      <li>HTMLCollection 객체의 부작용을 해결하기 위해 querySelectorAll 메소드를 사용하는 방법이 있다. 이 메소드는 DOM Collection 객체인 NodeList 객체를 반환한다.</li>
      <li>NodeList 객체는 대부분의 경우 non-live 객체로 동작한다. 하지만, <strong>childNodes 프로퍼티가 반환하는 NodeList 객체는 live 객체이므로 주의가 필요하다.</strong></li>
    </ul>
  </li>
</ul>

<h3 id="결론">결론</h3>
<ul>
  <li>NodeList, HTMLCollection 객체는 예상과 다르게 동작할 때가 있어 다루기 까다롭고 실수하기 쉽다. 따라서, <strong>배열로 변환하여 사용하는 것을 권장한다.</strong></li>
  <li>두 객체 모두 유사 배열 객체이면서 이터러블이므로, 스프레드 문법이나, Array.from 메소드를 사용해 간단하게 배열로 변환 가능하다.</li>
</ul>
:ET