I"<h3 id="에러-처리의-필요성">에러 처리의 필요성</h3>

<ul>
  <li>발생한 에러에 대해 대처하지 않고 방치하면 프로그램이 강제 종료된다.</li>
  <li>직접적으로 에러를 발생시키지 않는 exceptional 한 상황이 발생할 수도 있다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">$button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//에러를 발생시키지 않고, null을 반환한다.</span>
<span class="nx">$button</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">disabled</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//TypeError : Cannot read property 'classList' of null</span>
<span class="nx">$button</span><span class="p">?.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">disabled</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//optional chaining 연산자 사용</span>
</code></pre></div></div>

<h3 id="try--catch--finally-문">try … catch … finally 문</h3>

<p>에러 처리 방법</p>

<ol>
  <li>exceptional 한 상황이 발생하면 반환하는 값(null 또는 -1)을 if 문이나 단축 평가 또는 옵셔널 체이닝 연산자를 통해 확인하는 방법</li>
  <li>에러 처리 코드를 미리 등록해 두고 에러가 발생하면 에러 처리 코드로 점프하도록 하는 방법
    <ul>
      <li>try … catch … finally 문 (일반적으로 error handling이라고 한다.)</li>
    </ul>
  </li>
</ol>

<h3 id="error-객체">Error 객체</h3>

<ul>
  <li>message property와 stack property를 갖는다.
    <ul>
      <li>message property 값 : Error 생성자 함수에 인수로 전달한 에러 메시지</li>
      <li>stack property 값 : Error 를 발생시킨 콜스택의 호출 정보를 나타내는 문자열. 디버깅용.</li>
    </ul>
  </li>
  <li>7가지의 Error 생성자 함수를 제공한다.
    <ul>
      <li>Error : 일반적인 객체 에러 객체</li>
      <li>SyntaxError : 자바스크립트 문법에 맞지 않는 문을 해석할 때 발생하는 에러 객체</li>
      <li>TypeError : 피연산자 혹은 인수의 데이터 타입이 유효하지 않을 때 발생하는 에러 객체</li>
      <li>ReferenceError : 참조할 수 없는 식별자를 참조했을 때 발생하는 에러 객체</li>
      <li>RangeError : 숫자값의 허용 범위를 벗어났을 때</li>
      <li>URIError : encodeURI, decodeURI 함수에 부적절한 인수를 전달했을 때</li>
      <li>EvalError : eval 함수에서 발생하는 에러 객체</li>
    </ul>
  </li>
</ul>

<h3 id="throw-문">throw 문</h3>

<ul>
  <li>에러 객체를 생성한다고 에러가 발생하는 것은 아니다. 즉, <strong>에러 객체 생성과 에러 발생은 의미가 다르다.</strong></li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
  <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">something wrong</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">something wrong</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>throw 문의 표현식은 일반적으로 에러 객체를 지정한다. 에러를 던지면 catch문의 에러 변수가 생성되고 던져진 에러 객체가 할당된다. 그리고 catch 코드 블록이 실행된다.</li>
</ul>

<h3 id="에러의-전파">에러의 전파</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo에서 발생한 에러</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">foo</span><span class="p">();</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">baz</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">bar</span><span class="p">();</span>
<span class="p">};</span>

<span class="k">try</span> <span class="p">{</span>
  <span class="nx">baz</span><span class="p">();</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>foo 함수가 throw한 에러는 caller에게 전파되어 전역에서 캐치된다.</li>
  <li><strong>비동기 함수인 setTimeout이나 프로미스 후속 처리 메소드의 콜백 함수는 caller가 없다.</strong><br />
따라서 에러를 전파할 caller가 존재하지 않는다.</li>
</ul>
:ET